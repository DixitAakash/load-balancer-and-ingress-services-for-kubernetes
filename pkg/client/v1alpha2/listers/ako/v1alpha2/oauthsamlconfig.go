/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/vmware/load-balancer-and-ingress-services-for-kubernetes/pkg/apis/ako/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OAuthSamlConfigLister helps list OAuthSamlConfigs.
// All objects returned here must be treated as read-only.
type OAuthSamlConfigLister interface {
	// List lists all OAuthSamlConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.OAuthSamlConfig, err error)
	// OAuthSamlConfigs returns an object that can list and get OAuthSamlConfigs.
	OAuthSamlConfigs(namespace string) OAuthSamlConfigNamespaceLister
	OAuthSamlConfigListerExpansion
}

// oAuthSamlConfigLister implements the OAuthSamlConfigLister interface.
type oAuthSamlConfigLister struct {
	indexer cache.Indexer
}

// NewOAuthSamlConfigLister returns a new OAuthSamlConfigLister.
func NewOAuthSamlConfigLister(indexer cache.Indexer) OAuthSamlConfigLister {
	return &oAuthSamlConfigLister{indexer: indexer}
}

// List lists all OAuthSamlConfigs in the indexer.
func (s *oAuthSamlConfigLister) List(selector labels.Selector) (ret []*v1alpha2.OAuthSamlConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.OAuthSamlConfig))
	})
	return ret, err
}

// OAuthSamlConfigs returns an object that can list and get OAuthSamlConfigs.
func (s *oAuthSamlConfigLister) OAuthSamlConfigs(namespace string) OAuthSamlConfigNamespaceLister {
	return oAuthSamlConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OAuthSamlConfigNamespaceLister helps list and get OAuthSamlConfigs.
// All objects returned here must be treated as read-only.
type OAuthSamlConfigNamespaceLister interface {
	// List lists all OAuthSamlConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha2.OAuthSamlConfig, err error)
	// Get retrieves the OAuthSamlConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha2.OAuthSamlConfig, error)
	OAuthSamlConfigNamespaceListerExpansion
}

// oAuthSamlConfigNamespaceLister implements the OAuthSamlConfigNamespaceLister
// interface.
type oAuthSamlConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OAuthSamlConfigs in the indexer for a given namespace.
func (s oAuthSamlConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.OAuthSamlConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.OAuthSamlConfig))
	})
	return ret, err
}

// Get retrieves the OAuthSamlConfig from the indexer for a given namespace and name.
func (s oAuthSamlConfigNamespaceLister) Get(name string) (*v1alpha2.OAuthSamlConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("oauthsamlconfig"), name)
	}
	return obj.(*v1alpha2.OAuthSamlConfig), nil
}
